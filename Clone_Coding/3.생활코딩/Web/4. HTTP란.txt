# HTTP(HyperText Transfer Protocol)
- 텍스트 기반의 통신 규약으로 인터넷에서 데이터를 주고 받을 수 있는 프로토콜이다.

# HTTP 동작
- 클라이언트 즉, 사용자가 브라우저를 통해서 어떠한 서비스를 url을 통하거나 다른것을 통해서
요청(request)을 하면 서버에서는 해당 요청사항을 맞는 결과를 찾아서 사용자에게 
응답(response)하는 형태로 동작한다.

요청 : Client -> Sever
응답 : Server -> Client

HTML 문서만이 HTTP 통신을 위한 유일한 정보 문서는 아니다.
Plain text로 부터 JSON 데이터 및 XML과 같은 형태의 정보도 주고 받을 수 있으며,
보통은 클라이언트가 어떤 정보를 HTML 형태로 받고 싶은지, 
JSON 형태로 받고 싶은지 명시해주는 경우가 많다.


# HTTP 특징
1) HTTP 메시지는 HTTP 서버와 HTTP 클라이언트에 의해 해석된다.
2) TCP / IP를 이용하는 응용 프로토콜이다.
   (컴퓨터와 컴퓨터간에 데이터를 전송 할 수 있도록 하는 장치로 인터넷이라는 거대한 통신망을
    통해 원하는 정보(데이터)를 주고 받는 기능을 이용하는 응용 프로토콜)
3) HTTP는 연결 상태를 유지하지 않는 비연결성 프로토콜이다.
   (이러한 단점을 해결하기 위해 Cookie와 Session이 등장하였다.)
4) HTTP는 연결을 유지하지 않는 프로토콜이기 때문에 요청/응답 방식으로 동작한다.

Client : 자료에 접근할 수 있는 프로그램 (웹 브라우저, 핸드폰, 어플리케이션 등..)
Server : 어떠한 자료에 대한 접근을 관리하는 네트워크 상의 시스템(요청에 대한 응답을 보내준다)

# Request(요청)
- 클라이언트가 서버에게 연락을 하는것.

# Request Method(요청의 종류)
1) GET : 자료를 요청할 때 사용
2) POST : 자료의 생성을 요청할 때 사용
3) PUT : 자료의 수정을 요청할 때 사용
4) DELETE : 자료의 삭제를 요청할 때 사용


# Response(응답)
- 서버가 요청에 대한 답변을 클라이언트에게 보내는 것

# Status Code(상태 코드)
- 여러 종류가 있으며 모두 숫자 세자리로 이루어져 있으며, 아래와 같이 크게 다섯 부류로 나눌 수 있다.
1) 1XX (조건부 응답) : 요청을 받았으며 작업을 계속한다.
2) 2XX (성공) : 클라이언트가 요청한 동작을 수신하여 이해했고 승낙했으며 성공적으로 처리했음을 가르킨다.
3) 3XX (리다이렉션 완료) : 클라이언트는 요청을 마치기 위해 추가 동작을 취해야 한다.
4) 4XX (요청 오류) : 클라이언트에 오류가 있음을 나타낸다.
5) 5XX (서버 오류) : 서버가 유효한 요청을 명백하게 수행하지 못했음을 나타낸다.