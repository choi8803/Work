엔터프라이즈 아키텍처
Enterprise architecture
1) 대형 솔루션, 프로그램 개발에 사용하는 프로젝트 구성 방식
-> 큰 틀을 구성
2) 다양한 플랫폼을 지원하는 재사용성이 높은 코드를 작성하는 방식


#아래와 같은 프로그램에서 공통적으로 사용할 수 있는 로직을 구성
1) 캐셔들이 사용하는 응용프로그램
2) 운영 관리자 응용프로그램
3) 고객들이 사용하는 모바일, 웹 프로그램

#구조 
Data Access Layer (Class Library)
1) Manager(DB 통신)

Business Layer (Class Library)
1) 유효성 검사, 
2) 캐시(Cache)
  - 목적 : 자주 불러오는 데이터를 메모리에 담아서 출력하는 것
  - 장점 : 컴퓨터 비용 감소, 데이터를 출력하는 속도가 증가
  - 단점 : 메모리를 많이 필요로하게됨.

Presentation Layer

#Class Library(모듈화)
1) .Net Framework
2) .Net Core
3) .Net Framework(Portable) - Xamarin
4) .Net Standard ( 1,2,3번 환경에서 모두 호환되는 라이브러리)

#느슨한 결합
Interface를 사용

# 각 Tier 별로 접근 순서

클라이언트 버튼 -> ASP.NET MVC 리스트 출력 호출 -> BLL
-> IDAL -> DAL => BLL => MVC

#Dependency Injection
MVC5 환경 : Hi
MVC6 Core 환경 : Hello


