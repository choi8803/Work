
<Scaffold-DbContext>
1. Scaffold 관련 설치
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet tool install -g dotnet-aspnet-codegenerator

2. 명령어
Scaffold-DbContext "Server=localhost;Database=BookStoresDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models 
Scaffold-DbContext "Server=localhost;Database=BookStoresDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -force
Scaffold-DbContext -Connection Name=BookStoresDB Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -force

----------------------------------------------------------------------------------------------------------------------------------------------------------

<JWT Authorization>    //[#08. Authentication]
1. Create SecretKey in AppSettings
appsettings.json
  "JWTSettings": {
    "SecretKey": "thisisasecretkeyanddontsharewithanyone"
  },

JWTSettings.cs
  public string SecretKey { get; set; }

program.cs
  var jwtSection = builder.Configuration.GetSection("JWTSettings");
  builder.Services.Configure<JWTSettings>(jwtSection);

controller.cs
  public UsersController(BookStoresDBContext context, IOptions<JWTSettings> jwtsettings)
  {
        _context = context;
        _jwtSettings = jwtsettings.Value;
  }

2. Install JwtBearer Package
- Microsoft.AspNetCore.Authentication.JwtBearer

// sign your token here 
var tokenHandler = new JwtSecurityTokenHandler();
var key = Encoding.ASCII.GetBytes(_jwtSettings.SecretKey);
var tokenDescriptor = new SecurityTokenDescriptor
{
    Subject = new ClaimsIdentity(new Claim[]
    {
        new Claim(ClaimTypes.Name, user.EmailAddress)
    }),
    Expires = DateTime.UtcNow.AddMonths(6),
    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key),
        SecurityAlgorithms.HmacSha256)
};
var token = tokenHandler.CreateToken(tokenDescriptor);
userWithToken.AccessToken = tokenHandler.WriteToken(token);

3. Generate Token after Authentication
4. services.AddAuthentication
5. JwtBearerDefaults
6. AddJwtBearer
7. [Authorize]

----------------------------------------------------------------------------------------------------------------------------------------------------------

<Swagger>
1. Packages to install
- Swashbuckle.AspNetCore
  - Swashbuckle.AspNetCore.Swagger
  - Swashbuckle.AspNetCore.SwaggerGen
  - Swashbuckle.AspNetCore.SwaggerUI

2. ConfigureService 설정
services.AddSwaggerGen(c => 
{ 
    //c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" }); 
    c.SwaggerDoc("api", new OpenApiInfo { 
        Title = "문서의 제목", 
        Description = "문서의 설명", 
        Contact = new OpenApiContact { 
            Name = "서버 정보 - Server Gitlab", 
            Email = string.Empty, 
            Url = new Uri("http://xxx.xxx.xxx.xxx") 
        } 
    }); 
    c.SwaggerDoc("admin", new OpenApiInfo { 
        Title = "관리자 Title", 
        Description = "관리자 DESC", 
        Contact = new OpenApiContact { 
            Name = "서버 정보 - Server Gitlab", 
            Email = string.Empty, 
            Url = new Uri("http://000.000.000.000") 
        } 
    });
}

3. Configure 설정
app.UseSwagger(); 
app.UseSwaggerUI(c => { 
    //c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"); 
    c.SwaggerEndpoint("/swagger/api/swagger.json", "Api Documents"); 
    c.SwaggerEndpoint("/swagger/admin/swagger.json", "Admin Documents"); 
});

